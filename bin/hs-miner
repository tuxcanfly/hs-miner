#!/usr/bin/env node

'use strict';

process.title = 'hs-miner';

const Config = require('bcfg');
const Miner = require('./miner');
const lib = require('../');
const pkg = require('../package.json');

const config = new Config('hsd', {
  suffix: 'network',
  fallback: 'main'
});

config.inject({ network: lib.NETWORK });

config.load({
  env: true,
  argv: true
});

config.open('miner.conf');

let backend;
let nonce;
let range;
let grids;
let blocks;
let threads;
let device;
let ssl;
let host;
let port;
let user;
let pass;
let protocol;
let version;
let help;

try {
  backend = config.str(['backend', 'b'], lib.BACKEND);
  nonce = config.uint(['nonce'], 0);
  range = config.uint(['range', 'r'], 0xffffffff);
  grids = config.uint(['grids', 'm'], 52428);
  blocks = config.uint(['blocks', 'n'], 512);
  threads = config.uint(['threads', 'x'],
    backend === 'simple' ? Miner.getCPUCount() : 26843136);
  device = config.uint(['device', 'd'], -1);
  ssl = config.str(['ssl', 'l'], false);
  host = config.str(['host', 'i'], 'localhost');
  port = config.uint(['port', 'p'], 0);
  user = config.str(['user', 'u'], 'hns');
  pass = config.str(['pass', 'k'], '');
  protocol = config.str(['protocol', 'c'], 'solo');
  version = config.bool(['version', 'v'], false);
  help = config.bool(['help', 'h', '?'], false);
} catch (e) {
  console.error(e.message);
  version = false;
  help = true;
}

if (version) {
  console.error(pkg.version);
  process.exit(1);
}

if (help) {
  console.error(`hs-miner ${pkg.version}`);
  console.error(
    '  Copyright (c) 2018, Christopher Jeffrey <chjj@handshake.org>');
  console.error('');
  console.error('Usage:');
  console.error('$ hs-miner --ssl');
  console.error('            --host [host] --port [port]');
  console.error('            --user [user] --pass [pass]');
  console.error('            --backend [backend] --range [range]');
  console.error('            --grids [grids], --blocks [blocks]');
  console.error('            --threads [threads] --protocol [solo/stratum]');
  console.error('            --device [device] --help');
  process.exit(1);
}

const miner = new Miner({
  backend,
  nonce,
  range,
  grids,
  blocks,
  threads,
  device,
  ssl,
  host,
  port,
  user,
  pass,
  protocol
});

miner.start();
